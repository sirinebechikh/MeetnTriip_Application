{% extends 'Gestion_Evennement/base.html.twig' %}

{% block title %}Forum Discussion{% endblock %}

{% block body %}
<meta name="csrf-token" content="{{ csrf_token('react') }}">
<div class="container py-5">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">Community Forum</h2>
                <a href="{{ path('forum_new') }}" class="btn btn-primary">
                    <i class="fas fa-plus"></i> New Post
                </a>
            </div>

            {# Add filter buttons #}
            <div class="btn-group mb-4 w-100">
                <button type="button" class="btn btn-outline-primary active" data-filter="all">All Posts</button>
                <button type="button" class="btn btn-outline-primary" data-filter="sponsor">Sponsor</button>
                <button type="button" class="btn btn-outline-primary" data-filter="event">Event</button>
                <button type="button" class="btn btn-outline-primary" data-filter="travel">Travel</button>
            </div>

            {% for post in posts %}
            <div class="card mb-4 shadow-sm post-card" data-type="{{ post.type }}">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">{{ post.type }}</h5>
                    <div class="btn-group">
                        {% if is_granted('ROLE_ADMIN') %}
                            <span class="badge bg-{{ post.approvalStatus == 'approved' ? 'success' : 'warning' }} me-2">
                                {{ post.approvalStatus|capitalize }}
                            </span>
                        {% endif %}
                        {% if app.user and post.user.id == app.user.id %}
                            <a href="{{ path('forum_edit', {'id_post': post.idPost}) }}" 
                               class="btn btn-sm btn-outline-secondary">
                                <i class="fas fa-edit"></i>
                            </a>
                            <form method="post" action="{{ path('forum_delete', {'id_post': post.idPost}) }}" 
                                  class="d-inline">
                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ post.idPost) }}">
                                <button type="submit" class="btn btn-sm btn-outline-danger">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </form>
                        {% endif %}
                        <button type="button" class="btn btn-sm btn-outline-info comments-btn" 
                                data-post-id="{{ post.idPost }}"
                                onclick="toggleComments(this)">
                            <i class="fas fa-comments"></i> Comments
                        </button>
                    </div>
                </div>
                {# In the post card body #}
                <div class="card-body">
                    <p>{{ post.content }}</p>
                    
                    {% if post.mediaPath %}
                        {% if post.mediaType == 'image' %}
                            <img src="{{ asset('uploads/forum/' ~ post.mediaPath) }}" 
                                 class="img-fluid rounded mb-3" 
                                 alt="Post image">
                        {% else %}
                            <video class="w-100 mb-3" controls>
                                <source src="{{ asset('uploads/forum/' ~ post.mediaPath) }}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        {% endif %}
                    {% endif %}
                    
                    {# Add reaction buttons #}
                    <div class="d-flex align-items-center mt-3 mb-3">
                        <button class="btn btn-sm btn-outline-primary me-2 reaction-btn" 
                                onclick="reactToPost({{ post.idPost }}, 'like')"
                                data-post-id="{{ post.idPost }}" 
                                data-type="like">
                            <i class="fas fa-thumbs-up"></i>
                            <span class="likes-count">{{ reactionCounts[post.idPost].likes ?? 0 }}</span>
                        </button>
                        <button class="btn btn-sm btn-outline-danger reaction-btn"
                                onclick="reactToPost({{ post.idPost }}, 'dislike')"
                                data-post-id="{{ post.idPost }}" 
                                data-type="dislike">
                            <i class="fas fa-thumbs-down"></i>
                            <span class="dislikes-count">{{ reactionCounts[post.idPost].dislikes ?? 0 }}</span>
                        </button>
                    </div>
                    {# Add CSRF token input for comments #}
                    <input type="hidden" name="_token" value="{{ csrf_token('comment') }}">
                    
                    <form class="add-comment-form mt-3" onsubmit="submitComment(event, {{ post.idPost }})">
                        <input type="hidden" name="_token" value="{{ csrf_token('comment') }}">
                        <div class="input-group">
                            <input type="text" name="content" class="form-control" 
                                   placeholder="Write a comment..." 
                                   minlength="2" maxlength="255"
                                   required>
                            <button type="submit" class="btn btn-primary btn-sm">Post</button>
                        </div>
                        <small class="form-text text-danger d-none comment-error"></small>
                    </form>

                    {# Comments container remains toggleable #}
                    <div class="comments-container" id="comments-{{ post.idPost }}"></div>
                    
                    <div class="text-muted small mt-3 d-flex align-items-center">
                        <img src="{{ asset(post.user.image) }}" alt="{{ post.user.nom }}" 
                             class="rounded-circle me-2" style="width: 32px; height: 32px; object-fit: cover">
                        Posted by {{ post.user.nom }}
                    </div>
                </div>
            </div> {# Add closing div for card #}
            {% endfor %}
            
            {# Add pagination controls #}
            <div class="navigation d-flex justify-content-center mt-4">
                {{ knp_pagination_render(posts, 'gestion_de_depence/forum/_pagination.html.twig') }}
            </div>
        </div>
    </div>
</div>

    <script>
        window.currentUserId = {{ app.user.id|default('null') }};
    </script>
    
        
    </div>
{% endblock %}

{# Remove this entire duplicate section #}
{# {% block body %}...{% endblock %} #}

{% block javascripts %}
{{ parent() }}
<script>
// Add this at the beginning of your JavaScript block
document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('[data-filter]');
    
    filterButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Remove active class from all buttons
            filterButtons.forEach(btn => btn.classList.remove('active'));
            // Add active class to clicked button
            this.classList.add('active');
            
            const filterValue = this.getAttribute('data-filter');
            const posts = document.querySelectorAll('.post-card');
            
            posts.forEach(post => {
                if (filterValue === 'all' || post.getAttribute('data-type') === filterValue) {
                    post.style.display = 'block';
                } else {
                    post.style.display = 'none';
                }
            });
        });
    });
});

// In submitComment function:
async function submitComment(event, postId) {
    event.preventDefault();
    const form = event.target;
    const errorDisplay = form.querySelector('.comment-error');
    const contentInput = form.querySelector('input[name="content"]');
    
    errorDisplay.classList.add('d-none');
    errorDisplay.textContent = '';
    contentInput.classList.remove('is-invalid');

    const formData = new FormData(form);
    
    try {
        const response = await fetch(`/forum/post/${postId}/add-comment`, {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json(); // Read JSON only once
        
        if (!response.ok) {
            throw new Error(data.error || 'Failed to post comment');
        }
        
        // Use the already parsed data instead of reading response.json() again
        const container = document.getElementById(`comments-${postId}`);
        let commentsList = container.querySelector('.mt-3');
        if (!commentsList) {
            commentsList = document.createElement('div');
            commentsList.className = 'mt-3';
            container.prepend(commentsList);
        }
        commentsList.insertAdjacentHTML('afterbegin', `
            <div class="card mb-2" id="comment-${data.id_comment}">
                <div class="card-body p-2">
                    <p class="mb-0">${data.content}</p>
                    <div class="d-flex align-items-center mt-2">
                        <button class="btn btn-sm btn-outline-primary me-2 reaction-btn" 
                                onclick="reactToComment(${data.id_comment}, 'like')"
                                data-comment-id="${data.id_comment}" 
                                data-type="like">
                            <i class="fas fa-thumbs-up"></i>
                            <span class="likes-count">0</span>
                        </button>
                        <button class="btn btn-sm btn-outline-danger reaction-btn"
                                onclick="reactToComment(${data.id_comment}, 'dislike')"
                                data-comment-id="${data.id_comment}" 
                                data-type="dislike">
                            <i class="fas fa-thumbs-down"></i>
                            <span class="dislikes-count">0</span>
                        </button>
                    </div>
                </div>
            </div>
        `);
        
        form.reset();
    } catch (error) {
        console.error('Error:', error);
        errorDisplay.textContent = error.message;
        errorDisplay.classList.remove('d-none');
        contentInput.classList.add('is-invalid');
    }
}

// Add similar error handling to deleteComment and handleEditComment functions
// Add to your javascripts block
// In deleteComment function:
async function deleteComment(commentId, button) {
    try {
        const cardBody = button.closest('.card-body');
        const csrfToken = cardBody.querySelector('input[name="_token"]').value;

        const response = await fetch(`/forum/post/${commentId}/delete-comment`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `_token=${encodeURIComponent(csrfToken)}`
        });
        
        if (!response.ok) {
            const result = await response.json();
            throw new Error(result.error || 'Delete failed');
        }
        
        // Remove comment card directly without waiting for response
        button.closest('.card.mb-2').remove();
    } catch (error) {
        console.error('Delete failed:', error);
        alert(error.message);
    }
}

// In fetchComments function:
async function reactToComment(commentId, type) {
    try {
        const token = document.querySelector('meta[name="csrf-token"]').content;
        const response = await fetch(`/forum/comment/${commentId}/react/${type}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token,
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        const responseText = await response.text();
        let data;
        try {
            data = JSON.parse(responseText);
        } catch (e) {
            console.error('Response text:', responseText);
            throw new Error('Invalid JSON response');
        }

        if (!response.ok) {
            throw new Error(data.error || 'Failed to react');
        }

        // Update reaction counts
        const commentCard = document.querySelector(`#comment-${commentId}`);
        if (commentCard) {
            commentCard.querySelector('.likes-count').textContent = data.likes;
            commentCard.querySelector('.dislikes-count').textContent = data.dislikes;
        }

        return data;
    } catch (error) {
        console.error('Error:', error);
        alert(error.message);
    }
}

async function fetchComments(postId, container) {
    try {
        const response = await fetch(`/forum/post/${postId}/comments`, {
            headers: {
                'Accept': 'application/json'
            }
        });
        if (!response.ok) throw new Error('Failed to fetch comments');
        
        const comments = await response.json();
        container.innerHTML = '';
        
        function displayComments(comments, container) {
            let html = '<div class="mt-3">';
            comments.forEach(comment => {
                html += `
                    <div class="card mb-2" id="comment-${comment.id_comment}">
                        <div class="card-body p-2">
                            <p class="mb-0">${comment.content}</p>
                            <div class="d-flex justify-content-between align-items-center mt-2">
                                <div class="d-flex align-items-center">
                                    <button class="btn btn-sm btn-outline-primary me-2 reaction-btn" 
                                            onclick="reactToComment(${comment.id_comment}, 'like')"
                                            data-comment-id="${comment.id_comment}" 
                                            data-type="like">
                                        <i class="fas fa-thumbs-up"></i>
                                        <span class="likes-count">${comment.likes || 0}</span>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger reaction-btn"
                                            onclick="reactToComment(${comment.id_comment}, 'dislike')"
                                            data-comment-id="${comment.id_comment}" 
                                            data-type="dislike">
                                        <i class="fas fa-thumbs-down"></i>
                                        <span class="dislikes-count">${comment.dislikes || 0}</span>
                                    </button>
                                </div>
                                ${window.currentUserId === comment.id_user ? `
                                    <div>
                                        <button class="btn btn-sm btn-outline-secondary me-2" onclick="handleEditComment(this)">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <form method="post" class="d-inline">
                                            <input type="hidden" name="_token" value="${comment.csrf_token}">
                                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                                    onclick="deleteComment(${comment.id_comment}, this)">
                                                <i class="fas fa-trash"></i> Delete
                                            </button>
                                        </form>
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                `;
            });
            html += '</div>';
            container.innerHTML = html;
        }

        displayComments(comments, container);
    } catch (error) {
        console.error('Error fetching comments:', error);
        container.innerHTML = '<div class="alert alert-danger">Failed to load comments</div>';
    }
}


function handleEditComment(button) {
    const commentCard = button.closest('.card.mb-2');
    const contentPara = commentCard.querySelector('p.mb-0');
    const originalContent = contentPara.textContent;
    
    // Create edit form
    const editForm = document.createElement('form');
    editForm.innerHTML = `
        <div class="input-group">
            <input type="text" class="form-control" value="${originalContent}">
            <div class="input-group-append">
                <button type="submit" class="btn btn-success btn-sm">Save</button>
                <button type="button" class="btn btn-danger btn-sm" 
                        onclick="cancelEdit(this, '${originalContent}')">Cancel</button>
            </div>
        </div>
    `;
    
    // Replace content with form
    contentPara.replaceWith(editForm);
    
    // Handle form submission
    editForm.onsubmit = async (e) => {
        e.preventDefault();
        const newContent = editForm.querySelector('input').value;
        
        try {
            const response = await fetch(`/forum/post/${button.dataset.commentId}/update-comment`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `content=${encodeURIComponent(newContent)}`
            });
            
            if (!response.ok) throw new Error('Update failed');
            
            editForm.replaceWith(contentPara);
            contentPara.textContent = newContent;
        } catch (error) {
            console.error('Update error:', error);
            alert('Failed to update comment');
        }
    };
}

function cancelEdit(button, originalContent) {
    const form = button.closest('form');
    const contentPara = document.createElement('p');
    contentPara.className = 'mb-0';
    contentPara.textContent = originalContent;
    form.replaceWith(contentPara);
}


function toggleComments(button) {
    const postId = button.getAttribute('data-post-id');
    const commentsContainer = document.getElementById(`comments-${postId}`);
    
    if (commentsContainer.style.display === 'none' || commentsContainer.style.display === '') {
        commentsContainer.style.display = 'block';
        if (!commentsContainer.hasChildNodes()) {
            fetchComments(postId, commentsContainer);
        }
    } else {
        commentsContainer.style.display = 'none';
    }
}


// Move reactToPost function inside the script tag
async function reactToPost(postId, type) {
    try {
        const response = await fetch(`/forum/post/${postId}/react/${type}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': '{{ csrf_token('react') }}'
            },
            credentials: 'same-origin'
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || 'Failed to react');
        }
        
        const data = await response.json();
        
        // Update counts
        const post = document.querySelector(`[data-post-id="${postId}"]`).closest('.card');
        post.querySelector('.likes-count').textContent = data.likes;
        post.querySelector('.dislikes-count').textContent = data.dislikes;
        
    } catch (error) {
        console.error('Error:', error);
        alert('Failed to react to post: ' + error.message);
    }
}
</script>
{% endblock %}
