{% extends 'Gestion_Evennement/base.html.twig' %}

{% block title %}Manage Events{% endblock %}

{% block body %}
 
<div class="container">
    <h1 class="text-center mb-4">Create Events</h1>

    <!-- Messages flash -->
    {% for message in app.flashes('success') %}
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>Success!</strong> {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
    
    {% for message in app.flashes('error') %}
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Error!</strong> {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
    
    <!-- Auto-hide after 4 seconds -->
    <script>
        setTimeout(() => {
            document.querySelectorAll('.alert').forEach(alert => {
                // Smooth fade out
                alert.classList.remove('show');
                alert.classList.add('fade');
                // Then remove from DOM after animation ends (optional)
                setTimeout(() => alert.remove(), 500);
            });
        }, 4000); // 4 seconds
    </script>  

    <!-- Ajout d'un événement -->
    <div class="d-flex gap-2">
        <button type="button" class="btn btn-meeet mb-3" data-bs-toggle="modal" data-bs-target="#eventModal">
            Add Event
        </button>
        
        <!-- AI Generation Button -->
        <button type="button" 
                class="btn btn-meeet mb-3" 
                data-bs-toggle="modal" 
                data-bs-target="#aiEventModal">
            <i class="fas fa-robot me-2"></i>Generate Event with AI
        </button>
    </div>

    <div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="eventModalLabel">New Event</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                
                <div class="modal-body">
                    <div class="form-container">
                        <!-- Logo -->
                        <div class="form-logo text-center mb-3">
                            <img src="{{ asset('img/brand-logo.png') }}" alt="MeetNTrip Logo" class="img-fluid" style="max-height: 80px;">
                        </div>
                        
                        <!-- Global errors container -->
                        <div id="form-global-errors" class="alert alert-danger d-none"></div>
                        
                        {{ form_start(form, {'method': 'POST', 'action': path('client_evenement_new'), 'attr': {'class': 'form-container event-form', 'novalidate': 'novalidate'}}) }}
                        
                        <!-- Explicit form field rendering to control error display -->
                        {% for field_name, field in form.children %}
                            {% if field_name != '_token' %}
                                <div class="form-group mb-3">
                                    {{ form_label(field) }}
                                    {{ form_widget(field, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback field-error-{{ field_name }}"></div>
                                </div>
                            {% endif %}
                        {% endfor %}
                        
                        {{ form_rest(form) }}
                        
                        <button type="submit" class="btn btn-primary w-100">Save</button>
                        
                        {{ form_end(form) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Affichage des événements -->
    <div class="row">
        {% for event in evenements %}
            <div class="col-md-4">
                <div class="card shadow-sm border rounded-4 p-3 mb-4" style="border: 3px solid #e02454;  ">
                    {% if event.imagePath %}
                        <img src="{{ asset('uploads/events/' ~ event.imagePath) }}" class="card-img-top" alt="Event Image" style="height: 200px; object-fit: cover;">
                    {% else %}
                        <div class="card-img-top bg-secondary" style="height: 200px; display: flex; align-items: center; justify-content: center;">
                            <span class="text-white">No Image</span>
                        </div>
                    {% endif %}
                    <div class="card-body">
                        <h5 class="card-title">{{ event.nom }}</h5>
                        <p class="card-text"><strong>Description:</strong>{{ event.description|slice(0, 100) ~ (event.description|length > 100 ? '...' : '') }}</p>
                        <p><strong>Type:</strong> {{ event.type }}</p>
                        <p><strong>Location:</strong> {{ event.lieuEvenement }}</p>
                        <p><strong>Budget:</strong> {{ event.budgetPrevu }} $</p>

                    
                        <style>
                            .btn-meeet{
                                background-color: #003a66 !important;
                                border-color: #e02454;
                                color: white !important;
                            }
                            .btn-meet {
                                background-color: #003a66 !important;
                                border-color: #e02454;
                                color: white !important;
                            }
                            .btn-meet:hover {
                                background-color: #c81e48 !important;
                                border-color: #c81e48 !important;
                            }
                            .form-container .is-invalid {
                                border-color: #dc3545;
                            }
                            .form-container .invalid-feedback {
                                display: block;
                                color: #dc3545;
                            }
                            .btn{
                                background-color: #003a66 !important;
                                color: #e02454;
                            }
                        </style>
                        
                        <div class="d-flex flex-wrap align-items-center gap-2 mt-2">
                            <!-- Bouton Modifier -->
                            <button type="button" class="btn btn-meet" data-bs-toggle="modal" data-bs-target="#editEventModal{{ event.id }}">
                                Edit
                            </button>
                        
                            <!-- Bouton Delete -->
                            <form action="{{ path('client_evenement_delete', {'id': event.id}) }}" method="POST" class="m-0 p-0">
                                <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ event.id) }}">
                                <button type="submit" class="btn btn-meet">Delete</button>
                            </form>
                        
                            <!-- Bouton Demande Sponsoring -->
                            <a href="{{ path('app_d_sponsor', {'id': event.id}) }}" class="btn btn-meet">
                                Faire une demande de Sponsoring
                            </a>
                        
                            <!-- Bouton Gérer Employés -->
                            <a href="{{ path('assign_employees_to_event', { id: event.id }) }}" class="btn btn-meet">
                                Gérer Employés
                            </a>
                        </div>
                        
                    </div>
                </div>
            </div>

            <!-- Modal pour modifier l'événement -->
            <div class="modal fade" id="editEventModal{{ event.id }}" tabindex="-1" aria-labelledby="editEventModalLabel{{ event.id }}" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editEventModalLabel{{ event.id }}">Edit Event</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <!-- Global form errors container -->
                            <div id="edit-form-global-errors-{{ event.id }}" class="alert alert-danger d-none"></div>
                            
                            <div class="form-container">
                                <!-- Ajout du logo -->
                                <div class="text-center my-3">
                                    <img src="{{ asset('img/brand-logo.png') }}" alt="MeetNTrip Logo" class="img-fluid" style="max-width: 200px;">
                                </div>
                                
                                {{ form_start(editForms[event.id], {
                                    'action': path('client_evenement_edit', {'id': event.id}),
                                    'method': 'POST',
                                    'attr': {'enctype': 'multipart/form-data', 'class': 'form-container edit-event-form', 'novalidate': 'novalidate'}
                                }) }}
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].nom) }}
                                    {{ form_widget(editForms[event.id].nom, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].type) }}
                                    {{ form_widget(editForms[event.id].type, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].nombreInvite) }}
                                    {{ form_widget(editForms[event.id].nombreInvite, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].dateDebut) }}
                                    {{ form_widget(editForms[event.id].dateDebut, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].dateFin) }}
                                    {{ form_widget(editForms[event.id].dateFin, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].description) }}
                                    {{ form_widget(editForms[event.id].description, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].lieuEvenement) }}
                                    {{ form_widget(editForms[event.id].lieuEvenement, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].budgetPrevu) }}
                                    {{ form_widget(editForms[event.id].budgetPrevu, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].activities) }}
                                    {{ form_widget(editForms[event.id].activities, {'attr': {'class': 'form-control'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <div class="form-group mb-3">
                                    {{ form_label(editForms[event.id].imagePath) }}
                                    {{ form_widget(editForms[event.id].imagePath, {'attr': {'class': 'form-control-file'}}) }}
                                    <div class="invalid-feedback"></div>
                                </div>
                            
                                <button type="submit" class="btn btn-primary w-100">Save Changes</button>
                            
                                {{ form_end(editForms[event.id]) }}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>

    <!-- AI Event Generation Modal -->
    <div class="modal fade" id="aiEventModal" tabindex="-1" aria-labelledby="aiEventModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="aiEventModalLabel">AI Event Generator</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Global form errors container - UPDATED STYLING -->
                    <div id="ai-form-global-errors" class="alert alert-danger mb-3" style="display: none;"><!-- Changed from d-none to style="display: none;" --></div>
                    
                    <div class="form-container">
                        <!-- Rest of your form code -->
                        <!-- Logo -->
                        <div class="form-logo text-center mb-3">
                            <img src="{{ asset('img/brand-logo.png') }}" alt="MeetNTrip Logo" class="img-fluid" style="max-height: 80px;">
                        </div>
                        
                        {{ form_start(aiForm, {'method': 'POST', 'action': path('ai_generate_event'), 'attr': {'class': 'form-container ai-event-form', 'novalidate': 'novalidate'}}) }}
                        
                        <div class="form-group mb-3">
                            {{ form_label(aiForm.nom) }}
                            {{ form_widget(aiForm.nom, {'attr': {'class': 'form-control'}}) }}
                            <div class="invalid-feedback"></div>
                        </div>
    
                        <div class="form-group mb-3">
                            {{ form_label(aiForm.type) }}
                            {{ form_widget(aiForm.type, {'attr': {'class': 'form-control'}}) }}
                            <div class="invalid-feedback"></div>
                        </div>
    
                        <div class="form-group mb-3">
                            {{ form_label(aiForm.nombreInvite) }}
                            {{ form_widget(aiForm.nombreInvite, {'attr': {'class': 'form-control'}}) }}
                            <div class="invalid-feedback"></div>
                        </div>
    
                        <div class="form-group mb-3">
                            {{ form_label(aiForm.dateDebut) }}
                            {{ form_widget(aiForm.dateDebut, {'attr': {'class': 'form-control'}}) }}
                            <div class="invalid-feedback"></div>
                        </div>
    
                        <div class="form-group mb-3">
                            {{ form_label(aiForm.dateFin) }}
                            {{ form_widget(aiForm.dateFin, {'attr': {'class': 'form-control'}}) }}
                            <div class="invalid-feedback"></div>
                        </div>
    
                        <div class="form-group mb-3">
                            {{ form_label(aiForm.lieuEvenement) }}
                            {{ form_widget(aiForm.lieuEvenement, {'attr': {'class': 'form-control'}}) }}
                            <div class="invalid-feedback"></div>
                        </div>
    
                        <button type="submit" class="btn btn-primary w-100">Generate & Save</button>
                        
                        {{ form_end(aiForm) }}
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- JavaScript for automatically opening modals with errors -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const eventForm = document.querySelector('.event-form');
            if (eventForm) {
                eventForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    // Reset previous error messages
                    document.querySelectorAll('.invalid-feedback').forEach(el => {
                        el.innerHTML = '';
                        el.style.display = 'none';
                    });
                    document.querySelectorAll('.is-invalid').forEach(el => {
                        el.classList.remove('is-invalid');
                    });
                    
                    const formGlobalErrors = document.getElementById('form-global-errors');
                    if (formGlobalErrors) {
                        formGlobalErrors.classList.add('d-none');
                        formGlobalErrors.textContent = '';
                    }
                    
                    const formData = new FormData(eventForm);
                    
                    // Submit form via AJAX
                    fetch(eventForm.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'  // Indicate this is an AJAX request
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Form submitted successfully
                            window.location.reload();
                        } else {
                            // Display validation errors
                            if (data.errors) {
                                Object.keys(data.errors).forEach(fieldName => {
                                    const errorMessage = data.errors[fieldName];
                                    
                                    // Find the field (trying different formats)
                                    let fieldInput = document.querySelector(`[name="evenement_type[${fieldName}]"]`);
                                    if (!fieldInput) {
                                        fieldInput = document.querySelector(`[name="evenement[${fieldName}]"]`);
                                    }
                                    
                                    if (fieldInput) {
                                        // Mark field as invalid
                                        fieldInput.classList.add('is-invalid');
                                        
                                        // Find the error message container
                                        const errorContainer = document.querySelector(`.field-error-${fieldName}`);
                                        if (errorContainer) {
                                            errorContainer.textContent = errorMessage;
                                            errorContainer.style.display = 'block';
                                        }
                                    } else {
                                        // Add to global errors if field not found
                                        if (formGlobalErrors) {
                                            formGlobalErrors.classList.remove('d-none');
                                            formGlobalErrors.textContent += `${fieldName}: ${errorMessage} `;
                                        }
                                    }
                                });
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error submitting form:', error);
                        if (formGlobalErrors) {
                            formGlobalErrors.classList.remove('d-none');
                            formGlobalErrors.textContent = 'An error occurred while submitting the form. Please try again.';
                        }
                    });
                });
            }
        });
        // Add this JavaScript after your existing script for the new event form
document.addEventListener('DOMContentLoaded', function() {
    // Handle edit form submissions via AJAX
    document.querySelectorAll('form[action^="/client/evenement/"][action$="/edit"]').forEach(function(editForm) {
        editForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Reset previous error messages in this form
            editForm.querySelectorAll('.invalid-feedback').forEach(el => {
                el.innerHTML = '';
                el.style.display = 'none';
            });
            editForm.querySelectorAll('.is-invalid').forEach(el => {
                el.classList.remove('is-invalid');
            });
            
            const formData = new FormData(editForm);
            
            // Submit form via AJAX
            fetch(editForm.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'  // Indicate this is an AJAX request
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                // Check if the response is JSON before trying to parse it
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return response.json();
                } else {
                    throw new Error('Server did not return JSON. Check your controller response.');
                }
            })
            .then(data => {
                if (data.success) {
                    // Form submitted successfully
                    window.location.reload();
                } else {
                    // Display validation errors
                    if (data.errors) {
                        let hasVisibleError = false;
                        
                        Object.keys(data.errors).forEach(fieldName => {
                            const errorMessage = data.errors[fieldName];
                            
                            // Find the field within this form
                            const fieldId = `edit_${fieldName}`;
                            const fieldInput = editForm.querySelector(`[name$="[${fieldName}]"]`);
                            
                            if (fieldInput) {
                                // Mark field as invalid
                                fieldInput.classList.add('is-invalid');
                                
                                // Find the closest invalid-feedback div
                                const errorContainer = fieldInput.closest('.form-group').querySelector('.invalid-feedback');
                                if (errorContainer) {
                                    errorContainer.textContent = errorMessage;
                                    errorContainer.style.display = 'block';
                                    hasVisibleError = true;
                                }
                            }
                        });
                        
                        // If no visible errors were displayed, show a general error alert
                        if (!hasVisibleError) {
                            // Create an alert at the top of the form
                            const alertDiv = document.createElement('div');
                            alertDiv.className = 'alert alert-danger mb-3';
                            alertDiv.textContent = 'Please check the form for errors.';
                            editForm.prepend(alertDiv);
                            
                            // Auto-remove after 4 seconds
                            setTimeout(() => {
                                alertDiv.classList.remove('show');
                                alertDiv.classList.add('fade');
                                setTimeout(() => alertDiv.remove(), 500);
                            }, 4000);
                        }
                    }
                }
            })
            .catch(error => {
                console.error('Error submitting edit form:', error);
                
                // Create an alert at the top of the form
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-danger mb-3';
                alertDiv.textContent = 'An error occurred while updating the event. Please try again.';
                editForm.prepend(alertDiv);
                
                // Auto-remove after 4 seconds
                setTimeout(() => {
                    alertDiv.classList.remove('show');
                    alertDiv.classList.add('fade');
                    setTimeout(() => alertDiv.remove(), 500);
                }, 4000);
            });
        });
    });
});
// Add this JavaScript after the other form handling scripts
// Simplified AI form handler
// Simplified AI form handler with null check
document.addEventListener('DOMContentLoaded', function() {
    const aiEventForm = document.querySelector('.ai-event-form');
    if (!aiEventForm) return;
    
    aiEventForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Clear previous errors - with null check
        const formGlobalErrors = document.getElementById('ai-form-global-errors');
        if (formGlobalErrors) {
            formGlobalErrors.style.display = 'none';
            formGlobalErrors.textContent = '';
        }
        
        aiEventForm.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
        aiEventForm.querySelectorAll('.invalid-feedback').forEach(el => {
            el.style.display = 'none';
            el.textContent = '';
        });
        
        // Show loading state
        const submitBtn = aiEventForm.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Generating...';
        
        // Submit the form via fetch
        fetch(aiEventForm.action, {
            method: 'POST',
            body: new FormData(aiEventForm),
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            // Reset button
            submitBtn.disabled = false;
            submitBtn.textContent = originalBtnText;
            
            if (data.success) {
                window.location.reload();
                return;
            }
            
            // Handle errors
            if (data.errors) {
                console.log("Received errors:", data.errors); // Debug log
                
                // Make sure formGlobalErrors exists
                if (!formGlobalErrors) {
                    console.error('Global errors container not found!');
                    alert('Error: ' + (data.errors.form || data.errors.api || 'Please check form for errors'));
                    return;
                }
                
                // Check for form-level error
                if (data.errors.form) {
                    formGlobalErrors.textContent = data.errors.form;
                    formGlobalErrors.style.display = 'block';
                    return;
                }
                
                // Check for API error
                if (data.errors.api) {
                    formGlobalErrors.textContent = data.errors.api;
                    formGlobalErrors.style.display = 'block';
                    return;
                }
                
                // Handle field-specific errors
                let hasFieldErrors = false;
                
                Object.keys(data.errors).forEach(fieldName => {
                    const fieldInput = aiEventForm.querySelector(`[name$="[${fieldName}]"]`);
                    if (fieldInput) {
                        fieldInput.classList.add('is-invalid');
                        const errorFeedback = fieldInput.closest('.form-group').querySelector('.invalid-feedback');
                        if (errorFeedback) {
                            errorFeedback.textContent = data.errors[fieldName];
                            errorFeedback.style.display = 'block';
                            hasFieldErrors = true;
                        }
                    } else {
                        // If field not found, add to global errors
                        formGlobalErrors.textContent += `${fieldName}: ${data.errors[fieldName]} `;
                        formGlobalErrors.style.display = 'block';
                    }
                });
                
                if (!hasFieldErrors && Object.keys(data.errors).length > 0) {
                    formGlobalErrors.textContent = 'Please check the form for errors.';
                    formGlobalErrors.style.display = 'block';
                }
            }
        })
        .catch(error => {
            console.error('Form submission error:', error);
            submitBtn.disabled = false;
            submitBtn.textContent = originalBtnText;
            
            if (formGlobalErrors) {
                formGlobalErrors.textContent = 'An error occurred. Please try again.';
                formGlobalErrors.style.display = 'block';
            } else {
                alert('An error occurred. Please try again.');
            }
        });
    });
});
        document.addEventListener('DOMContentLoaded', function() {
            // Check if there's a form with errors and open the appropriate modal
            {% if form.vars.submitted and not form.vars.valid %}
                var newEventModal = new bootstrap.Modal(document.getElementById('eventModal'));
                newEventModal.show();
            {% endif %}
            
            {% for event in evenements %}
                {% if editForms[event.id] is defined and editForms[event.id].vars.submitted and not editForms[event.id].vars.valid %}
                    var editModal{{ event.id }} = new bootstrap.Modal(document.getElementById('editEventModal{{ event.id }}'));
                    editModal{{ event.id }}.show();
                {% endif %}
            {% endfor %}
            
            {% if aiForm.vars.submitted and not aiForm.vars.valid %}
                var aiEventModal = new bootstrap.Modal(document.getElementById('aiEventModal'));
                aiEventModal.show();
            {% endif %}
        });
    </script>
{% endblock %}